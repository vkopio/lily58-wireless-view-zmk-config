/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    flavor = "balanced";
    require-prior-idle-ms = <150>;
    quick-tap-ms = <175>;
};

/ {
    behaviors {
        questex: questex {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTEX";
            bindings = <&kp QUESTION>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        comma: comma {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA";
            bindings = <&kp COMMA>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        period: period {
            compatible = "zmk,behavior-mod-morph";
            label = "PERIOD";
            bindings = <&kp PERIOD>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        slash: slash {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH";
            bindings = <&kp SLASH>, <&kp BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        ctrl_dance: ctrl_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "CTRL_DANCE";
            #binding-cells = <0>;
            bindings = <&kp LCTRL>, <&kp LS(LCTRL)>, <&kp LS(LA(LCTRL))>;

            tapping-term-ms = <300>;
        };

        gui_dance: gui_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "GUI_DANCE";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI>, <&kp LS(LEFT_GUI)>;

            tapping-term-ms = <300>;
        };

        alt_dance: alt_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "ALT_DANCE";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT>, <&kp LC(LEFT_ALT)>;

            tapping-term-ms = <300>;
        };

        mtl: mtl {
            compatible = "zmk,behavior-hold-tap";
            label = "MTL";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <54 44 30 18 6 7 19 23 31 32 33 34 35 45 46 47 48 49 8 9 10 11 20 21 22 23 55 56 57>;
        };

        mtr: mtr {
            compatible = "zmk,behavior-hold-tap";
            label = "MTR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 50 51 52 53 3>;
        };
    };

    macros {
        vim_wq: vim_wq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE &kp COLON &kp W &kp Q &kp ENTER>;
            label = "VIM_WQ";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "Base";
            bindings = <
&kp ESCAPE          &kp GRAVE        &kp SQT          &kp DOUBLE_QUOTES    &kp TILDE          &kp AMPERSAND                                         &kp PIPE        &slash              &kp EQUAL             &kp PLUS          &kp STAR             &kp CARET
&kp LS(TAB)         &kp Q            &kp W            &kp E                &kp R              &kp T                                                 &kp Y           &kp U               &kp I                 &kp O             &kp P                &questex
&mt LEFT_SHIFT TAB  &mtl LEFT_ALT A  &mtl LEFT_GUI S  &mtl LEFT_CONTROL D  &mtl LEFT_SHIFT F  &kp G                                                 &kp H           &mtr RIGHT_SHIFT J  &mtr RIGHT_CONTROL K  &mtr RIGHT_GUI L  &mtr LEFT_ALT RA(P)  &kp RA(Q)
&kp BACKSPACE       &kp Z            &kp X            &kp C                &kp V              &kp B          &kp LA(LC(LEFT))    &kp LA(LC(RIGHT))  &kp N           &kp M               &comma                &period           &kp MINUS            &kp DELETE
                                                      &alt_dance           &gui_dance         &ctrl_dance    &lt 1 SPACE         &lt 2 ENTER        &sk LEFT_SHIFT  &kp RIGHT_CONTROL   &kp RIGHT_ALT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        lower_layer {
            label = "Lower";
            bindings = <
&trans  &none             &none                   &none                 &none               &none                                             &none          &none                              &none                          &none                        &none                    &none
&trans  &none             &kp N7                  &kp N8                &kp N9              &kp PERCENT                                       &kp POUND      &none                              &none                          &none                        &none                    &none
&trans  &mtl LEFT_ALT N0  &mtl LEFT_GUI NUMBER_4  &mtl LEFT_CONTROL N5  &mtl LEFT_SHIFT N6  &kp DOLLAR                                        &kp AT         &mtr RIGHT_SHIFT LEFT_PARENTHESIS  &mtr RIGHT_CONTROL LEFT_BRACE  &mtr RIGHT_GUI LEFT_BRACKET  &mtr LEFT_ALT LESS_THAN  &kp RA(W)
&trans  &none             &kp N1                  &kp N2                &kp N3              &kp RA(NUMBER_5)  &kp LS(LA(TAB))    &kp LA(TAB)  &kp RA(LS(S))  &kp RIGHT_PARENTHESIS              &kp RIGHT_BRACE                &kp RIGHT_BRACKET            &kp GREATER_THAN         &trans
                                                  &trans                &trans              &trans            &trans             &trans       &trans         &trans                             &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        raise_layer {
            label = "Raise";
            bindings = <
&trans  &none              &kp F10           &kp F11               &kp F12             &none                                   &none          &none               &none     &none                &none            &none
&trans  &none              &kp F7            &kp F8                &kp F9              &none                                   &kp PAGE_UP    &kp LC(LEFT_ARROW)  &kp UP    &kp LC(RIGHT_ARROW)  &kp PAUSE_BREAK  &none
&trans  &mtl LEFT_ALT F13  &mtl LEFT_GUI F4  &mtl LEFT_CONTROL F5  &mtl LEFT_SHIFT F6  &none                                   &kp PAGE_DOWN  &kp LEFT            &kp DOWN  &kp RIGHT            &kp PRINTSCREEN  &none
&trans  &none              &kp F1            &kp F2                &kp F3              &none   &kp LS(LC(TAB))    &kp LC(TAB)  &kp INSERT     &kp HOME            &none     &kp END              &none            &trans
                                             &trans                &trans              &trans  &trans             &trans       &trans         &trans              &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        control_layer {
            bindings = <
&trans        &trans  &trans  &trans                 &trans             &trans                            &trans   &trans            &trans        &trans             &trans  &trans
&out OUT_TOG  &none   &none   &kp C_BRI_UP           &kp C_VOLUME_UP    &none                             &none    &kp LS(LC(LEFT))  &kp LS(UP)    &kp LS(LC(RIGHT))  &none   &none
&bt BT_CLR    &none   &none   &kp C_BRI_DN           &kp C_VOLUME_DOWN  &none                             &vim_wq  &kp LS(LEFT)      &kp LS(DOWN)  &kp LS(RIGHT)      &none   &none
&bootloader   &none   &none   &kp LS(LA(LC(LG(M))))  &kp K_MUTE         &none   &bt BT_PRV    &bt BT_NXT  &none    &kp LS(HOME)      &none         &kp LS(END)        &none   &bootloader
                              &trans                 &trans             &trans  &trans        &trans      &trans   &trans            &trans
            >;

            label = "Controls";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        conditional_control_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
